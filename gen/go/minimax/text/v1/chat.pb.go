// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: minimax/text/v1/chat.proto

package textv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当前支持以下：
	// USER: 表示用户
	// BOT: 表示对话助手
	SenderType string `protobuf:"bytes,1,opt,name=sender_type,json=senderType,proto3" json:"sender_type,omitempty"`
	// 对话内容，不能为空。
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minimax_text_v1_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_minimax_text_v1_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_minimax_text_v1_chat_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetSenderType() string {
	if x != nil {
		return x.SenderType
	}
	return ""
}

func (x *Message) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type RoleMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	BotName  string `protobuf:"bytes,2,opt,name=bot_name,json=botName,proto3" json:"bot_name,omitempty"`
}

func (x *RoleMeta) Reset() {
	*x = RoleMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minimax_text_v1_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleMeta) ProtoMessage() {}

func (x *RoleMeta) ProtoReflect() protoreflect.Message {
	mi := &file_minimax_text_v1_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleMeta.ProtoReflect.Descriptor instead.
func (*RoleMeta) Descriptor() ([]byte, []int) {
	return file_minimax_text_v1_chat_proto_rawDescGZIP(), []int{1}
}

func (x *RoleMeta) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *RoleMeta) GetBotName() string {
	if x != nil {
		return x.BotName
	}
	return ""
}

type ChatCompletionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 目前只能取以下一个值
	// abab5-chat
	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// 否 对回复添加情绪预测。注意，当with_emotion=true，且请求上下文（输入和输出文本）长时，请求会显著变慢，达到数秒。
	WithEmotion bool `protobuf:"varint,2,opt,name=with_emotion,json=withEmotion,proto3" json:"with_emotion,omitempty"`
	// 否 	是否以流式接口的形式返回数据，默认false。
	Stream bool `protobuf:"varint,3,opt,name=stream,proto3" json:"stream,omitempty"`
	// 是否通过流式分批返回结果。如果设置为true，结果分批返回，以一个换行为分割符；若希望使用标准SSE响应格式，可以设置use_standard_sse参数为true。默认false
	UseStandardSse bool `protobuf:"varint,4,opt,name=use_standard_sse,json=useStandardSse,proto3" json:"use_standard_sse,omitempty"`
	// 生成多少个结果；不设置默认为1，最大不超过4。 由于beam_width生成多个结果，会消耗更多token。 默认1
	BeamWidth int32 `protobuf:"varint,5,opt,name=beam_width,json=beamWidth,proto3" json:"beam_width,omitempty"`
	// 对话背景、人物或功能设定 长度上限为4096个token，不可为空
	Prompt string `protobuf:"bytes,6,opt,name=prompt,proto3" json:"prompt,omitempty"`
	// 对话上下文信息。说明："user_name": "我", "bot_name": "专家"
	RoleMeta *RoleMeta `protobuf:"bytes,7,opt,name=role_meta,json=roleMeta,proto3" json:"role_meta,omitempty"`
	// 是 	聊天上下文信息。说明：
	// （1）messages成员不能为空，1个成员表示单轮对话，多个成员表示多轮对话。
	// （2）最后一个message为当前请求的信息，前面的message为历史对话信息。
	// （3）必须为奇数个成员，成员中message的role必须依次为user、assistant。
	// （4）最后一个message的content长度（即此轮对话的问题）不能超过2000个字符；如果messages中content总长度大于2000字符，系统会依次遗忘最早的历史会话，直到content的总长度不超过2000个字符。
	Messages    []*Message `protobuf:"bytes,8,rep,name=messages,proto3" json:"messages,omitempty"`
	Temperature float32    `protobuf:"fixed32,9,opt,name=temperature,proto3" json:"temperature,omitempty"`
	TopP        float32    `protobuf:"fixed32,10,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	// 对输出中易涉及隐私问题的文本信息进行脱敏，目前包括但不限于邮箱、域名、链接、证件号、家庭住址等，默认false，即开启脱敏 默认false
	SkipInfoMask bool `protobuf:"varint,11,opt,name=skip_info_mask,json=skipInfoMask,proto3" json:"skip_info_mask,omitempty"`
}

func (x *ChatCompletionsRequest) Reset() {
	*x = ChatCompletionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minimax_text_v1_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionsRequest) ProtoMessage() {}

func (x *ChatCompletionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minimax_text_v1_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionsRequest.ProtoReflect.Descriptor instead.
func (*ChatCompletionsRequest) Descriptor() ([]byte, []int) {
	return file_minimax_text_v1_chat_proto_rawDescGZIP(), []int{2}
}

func (x *ChatCompletionsRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatCompletionsRequest) GetWithEmotion() bool {
	if x != nil {
		return x.WithEmotion
	}
	return false
}

func (x *ChatCompletionsRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *ChatCompletionsRequest) GetUseStandardSse() bool {
	if x != nil {
		return x.UseStandardSse
	}
	return false
}

func (x *ChatCompletionsRequest) GetBeamWidth() int32 {
	if x != nil {
		return x.BeamWidth
	}
	return 0
}

func (x *ChatCompletionsRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *ChatCompletionsRequest) GetRoleMeta() *RoleMeta {
	if x != nil {
		return x.RoleMeta
	}
	return nil
}

func (x *ChatCompletionsRequest) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *ChatCompletionsRequest) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *ChatCompletionsRequest) GetTopP() float32 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *ChatCompletionsRequest) GetSkipInfoMask() bool {
	if x != nil {
		return x.SkipInfoMask
	}
	return false
}

type Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 文本结果
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// 排名
	Index int64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// 分数
	Logprobes int64 `protobuf:"varint,3,opt,name=logprobes,proto3" json:"logprobes,omitempty"`
	// 结束原因，枚举值
	// stop：API返回了模型生成的完整结果
	// length：模型生成结果超过tokens_to_generate的长度，内容被截断
	FinishReason string `protobuf:"bytes,4,opt,name=finish_reason,json=finishReason,proto3" json:"finish_reason,omitempty"`
	// 回复文本情绪预测
	// 取值为以下八者其一 伤心 尴尬 开心 惊讶 愤怒 慌张 疑惑 自然
	Emotion string `protobuf:"bytes,5,opt,name=emotion,proto3" json:"emotion,omitempty"`
	// 当request.stream为true，处于流式模式下，回复文本通过delta给出
	Delta string `protobuf:"bytes,6,opt,name=delta,proto3" json:"delta,omitempty"`
}

func (x *Choice) Reset() {
	*x = Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minimax_text_v1_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Choice) ProtoMessage() {}

func (x *Choice) ProtoReflect() protoreflect.Message {
	mi := &file_minimax_text_v1_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Choice.ProtoReflect.Descriptor instead.
func (*Choice) Descriptor() ([]byte, []int) {
	return file_minimax_text_v1_chat_proto_rawDescGZIP(), []int{3}
}

func (x *Choice) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Choice) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Choice) GetLogprobes() int64 {
	if x != nil {
		return x.Logprobes
	}
	return 0
}

func (x *Choice) GetFinishReason() string {
	if x != nil {
		return x.FinishReason
	}
	return ""
}

func (x *Choice) GetEmotion() string {
	if x != nil {
		return x.Emotion
	}
	return ""
}

func (x *Choice) GetDelta() string {
	if x != nil {
		return x.Delta
	}
	return ""
}

type Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消耗tokens总数，包括输入和输出；具体计算方式为输入tokens + 最大输出tokens x beam_width。
	// 假设beam_width为2，输入tokens为100，输出结果分别为20tokens和30tokens，最终消耗160tokens
	TotalTokens int64 `protobuf:"varint,1,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
}

func (x *Usage) Reset() {
	*x = Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minimax_text_v1_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_minimax_text_v1_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_minimax_text_v1_chat_proto_rawDescGZIP(), []int{4}
}

func (x *Usage) GetTotalTokens() int64 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

type BaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 状态码
	//
	//	1000，未知错误
	//	1001，超时
	//	1002，触发限流
	//	1004，鉴权失败
	//	1008，余额不足
	//	1013，服务内部错误
	//	1027，输出内容严重违规
	//	2013，输入格式信息不正常
	StatusCode int64 `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// 错误详情
	StatusMsg string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
}

func (x *BaseResponse) Reset() {
	*x = BaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minimax_text_v1_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseResponse) ProtoMessage() {}

func (x *BaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minimax_text_v1_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseResponse.ProtoReflect.Descriptor instead.
func (*BaseResponse) Descriptor() ([]byte, []int) {
	return file_minimax_text_v1_chat_proto_rawDescGZIP(), []int{5}
}

func (x *BaseResponse) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *BaseResponse) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

type ChatCompletionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求发起时间
	Created int64 `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
	// 请求指定的模型
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// 推荐的最好结果
	Reply string `protobuf:"bytes,3,opt,name=reply,proto3" json:"reply,omitempty"`
	// 所有结果
	Choices []*Choice `protobuf:"bytes,4,rep,name=choices,proto3" json:"choices,omitempty"`
	// tokens数使用情况
	Usage *Usage `protobuf:"bytes,5,opt,name=usage,proto3" json:"usage,omitempty"`
	// 输入命中敏感词
	InputSensitive bool `protobuf:"varint,6,opt,name=input_sensitive,json=inputSensitive,proto3" json:"input_sensitive,omitempty"`
	// 输出命中敏感词
	OutputSensitive bool `protobuf:"varint,7,opt,name=output_sensitive,json=outputSensitive,proto3" json:"output_sensitive,omitempty"`
	// 错误状态码和详情
	BaseResp *BaseResponse `protobuf:"bytes,8,opt,name=base_resp,json=baseResp,proto3" json:"base_resp,omitempty"`
}

func (x *ChatCompletionsResponse) Reset() {
	*x = ChatCompletionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_minimax_text_v1_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionsResponse) ProtoMessage() {}

func (x *ChatCompletionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_minimax_text_v1_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionsResponse.ProtoReflect.Descriptor instead.
func (*ChatCompletionsResponse) Descriptor() ([]byte, []int) {
	return file_minimax_text_v1_chat_proto_rawDescGZIP(), []int{6}
}

func (x *ChatCompletionsResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ChatCompletionsResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatCompletionsResponse) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

func (x *ChatCompletionsResponse) GetChoices() []*Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *ChatCompletionsResponse) GetUsage() *Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ChatCompletionsResponse) GetInputSensitive() bool {
	if x != nil {
		return x.InputSensitive
	}
	return false
}

func (x *ChatCompletionsResponse) GetOutputSensitive() bool {
	if x != nil {
		return x.OutputSensitive
	}
	return false
}

func (x *ChatCompletionsResponse) GetBaseResp() *BaseResponse {
	if x != nil {
		return x.BaseResp
	}
	return nil
}

var File_minimax_text_v1_chat_proto protoreflect.FileDescriptor

var file_minimax_text_v1_chat_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x78, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x61, 0x78, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x22, 0x3e, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x42, 0x0a,
	0x08, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x95, 0x03, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x53, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x61, 0x6d, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x65, 0x61,
	0x6d, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x36,
	0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x78, 0x2e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x72, 0x6f,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x61, 0x78, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74,
	0x6f, 0x70, 0x50, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x6b, 0x69,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xa5, 0x01, 0x0a, 0x06, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x22, 0x2a, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x4e, 0x0a,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x22, 0xd0, 0x02,
	0x0a, 0x17, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x31, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x78, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x78, 0x2e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61,
	0x78, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x42, 0xbe, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x78,
	0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x43, 0x68, 0x61, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x49, 0x2d, 0x45, 0x2f, 0x67, 0x6f,
	0x2d, 0x77, 0x65, 0x6e, 0x78, 0x69, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x61, 0x78, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x74,
	0x65, 0x78, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x54, 0x58, 0xaa, 0x02, 0x0f, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x61, 0x78, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x78, 0x5c, 0x54, 0x65, 0x78, 0x74, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1b, 0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x78, 0x5c, 0x54, 0x65, 0x78, 0x74, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x11,
	0x4d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x78, 0x3a, 0x3a, 0x54, 0x65, 0x78, 0x74, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_minimax_text_v1_chat_proto_rawDescOnce sync.Once
	file_minimax_text_v1_chat_proto_rawDescData = file_minimax_text_v1_chat_proto_rawDesc
)

func file_minimax_text_v1_chat_proto_rawDescGZIP() []byte {
	file_minimax_text_v1_chat_proto_rawDescOnce.Do(func() {
		file_minimax_text_v1_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_minimax_text_v1_chat_proto_rawDescData)
	})
	return file_minimax_text_v1_chat_proto_rawDescData
}

var file_minimax_text_v1_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_minimax_text_v1_chat_proto_goTypes = []interface{}{
	(*Message)(nil),                 // 0: minimax.text.v1.Message
	(*RoleMeta)(nil),                // 1: minimax.text.v1.RoleMeta
	(*ChatCompletionsRequest)(nil),  // 2: minimax.text.v1.ChatCompletionsRequest
	(*Choice)(nil),                  // 3: minimax.text.v1.Choice
	(*Usage)(nil),                   // 4: minimax.text.v1.Usage
	(*BaseResponse)(nil),            // 5: minimax.text.v1.BaseResponse
	(*ChatCompletionsResponse)(nil), // 6: minimax.text.v1.ChatCompletionsResponse
}
var file_minimax_text_v1_chat_proto_depIdxs = []int32{
	1, // 0: minimax.text.v1.ChatCompletionsRequest.role_meta:type_name -> minimax.text.v1.RoleMeta
	0, // 1: minimax.text.v1.ChatCompletionsRequest.messages:type_name -> minimax.text.v1.Message
	3, // 2: minimax.text.v1.ChatCompletionsResponse.choices:type_name -> minimax.text.v1.Choice
	4, // 3: minimax.text.v1.ChatCompletionsResponse.usage:type_name -> minimax.text.v1.Usage
	5, // 4: minimax.text.v1.ChatCompletionsResponse.base_resp:type_name -> minimax.text.v1.BaseResponse
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_minimax_text_v1_chat_proto_init() }
func file_minimax_text_v1_chat_proto_init() {
	if File_minimax_text_v1_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_minimax_text_v1_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minimax_text_v1_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minimax_text_v1_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minimax_text_v1_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minimax_text_v1_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minimax_text_v1_chat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_minimax_text_v1_chat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_minimax_text_v1_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_minimax_text_v1_chat_proto_goTypes,
		DependencyIndexes: file_minimax_text_v1_chat_proto_depIdxs,
		MessageInfos:      file_minimax_text_v1_chat_proto_msgTypes,
	}.Build()
	File_minimax_text_v1_chat_proto = out.File
	file_minimax_text_v1_chat_proto_rawDesc = nil
	file_minimax_text_v1_chat_proto_goTypes = nil
	file_minimax_text_v1_chat_proto_depIdxs = nil
}

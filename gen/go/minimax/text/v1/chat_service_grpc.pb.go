// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: minimax/text/v1/chat_service.proto

package textv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MinimaxService_ChatCompletions_FullMethodName      = "/minimax.text.v1.MinimaxService/ChatCompletions"
	MinimaxService_ChatCompletionStream_FullMethodName = "/minimax.text.v1.MinimaxService/ChatCompletionStream"
)

// MinimaxServiceClient is the client API for MinimaxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinimaxServiceClient interface {
	ChatCompletions(ctx context.Context, in *ChatCompletionsRequest, opts ...grpc.CallOption) (*ChatCompletionsResponse, error)
	ChatCompletionStream(ctx context.Context, in *ChatCompletionsRequest, opts ...grpc.CallOption) (MinimaxService_ChatCompletionStreamClient, error)
}

type minimaxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMinimaxServiceClient(cc grpc.ClientConnInterface) MinimaxServiceClient {
	return &minimaxServiceClient{cc}
}

func (c *minimaxServiceClient) ChatCompletions(ctx context.Context, in *ChatCompletionsRequest, opts ...grpc.CallOption) (*ChatCompletionsResponse, error) {
	out := new(ChatCompletionsResponse)
	err := c.cc.Invoke(ctx, MinimaxService_ChatCompletions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minimaxServiceClient) ChatCompletionStream(ctx context.Context, in *ChatCompletionsRequest, opts ...grpc.CallOption) (MinimaxService_ChatCompletionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MinimaxService_ServiceDesc.Streams[0], MinimaxService_ChatCompletionStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &minimaxServiceChatCompletionStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MinimaxService_ChatCompletionStreamClient interface {
	Recv() (*ChatCompletionsResponse, error)
	grpc.ClientStream
}

type minimaxServiceChatCompletionStreamClient struct {
	grpc.ClientStream
}

func (x *minimaxServiceChatCompletionStreamClient) Recv() (*ChatCompletionsResponse, error) {
	m := new(ChatCompletionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MinimaxServiceServer is the server API for MinimaxService service.
// All implementations should embed UnimplementedMinimaxServiceServer
// for forward compatibility
type MinimaxServiceServer interface {
	ChatCompletions(context.Context, *ChatCompletionsRequest) (*ChatCompletionsResponse, error)
	ChatCompletionStream(*ChatCompletionsRequest, MinimaxService_ChatCompletionStreamServer) error
}

// UnimplementedMinimaxServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMinimaxServiceServer struct {
}

func (UnimplementedMinimaxServiceServer) ChatCompletions(context.Context, *ChatCompletionsRequest) (*ChatCompletionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCompletions not implemented")
}
func (UnimplementedMinimaxServiceServer) ChatCompletionStream(*ChatCompletionsRequest, MinimaxService_ChatCompletionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatCompletionStream not implemented")
}

// UnsafeMinimaxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinimaxServiceServer will
// result in compilation errors.
type UnsafeMinimaxServiceServer interface {
	mustEmbedUnimplementedMinimaxServiceServer()
}

func RegisterMinimaxServiceServer(s grpc.ServiceRegistrar, srv MinimaxServiceServer) {
	s.RegisterService(&MinimaxService_ServiceDesc, srv)
}

func _MinimaxService_ChatCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatCompletionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinimaxServiceServer).ChatCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MinimaxService_ChatCompletions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinimaxServiceServer).ChatCompletions(ctx, req.(*ChatCompletionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinimaxService_ChatCompletionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatCompletionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MinimaxServiceServer).ChatCompletionStream(m, &minimaxServiceChatCompletionStreamServer{stream})
}

type MinimaxService_ChatCompletionStreamServer interface {
	Send(*ChatCompletionsResponse) error
	grpc.ServerStream
}

type minimaxServiceChatCompletionStreamServer struct {
	grpc.ServerStream
}

func (x *minimaxServiceChatCompletionStreamServer) Send(m *ChatCompletionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MinimaxService_ServiceDesc is the grpc.ServiceDesc for MinimaxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MinimaxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minimax.text.v1.MinimaxService",
	HandlerType: (*MinimaxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChatCompletions",
			Handler:    _MinimaxService_ChatCompletions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatCompletionStream",
			Handler:       _MinimaxService_ChatCompletionStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "minimax/text/v1/chat_service.proto",
}
